// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/dotnet
{
	"name": "ScoutTrainingApp with WASM .NET for web learning",
	"dockerFile": "Dockerfile",
	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {},
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [
		8000, 3100
	],
	"portsAttributes": {
		"8000": {
			// The embedded webview preview _should_ work, but doesn't reach
			// the Avalonia.Designer.HostApp.dll Previewer executable.
			// "onAutoForward": "openPreview",

			"label": "Avalonia Preview",
			"protocol": "http"
		},
		"3100": {
			"label": "ScoutTrainingApp.Browser",
			"protocol": "http"
		}
	},
	// Each object key in postCreateCommand will run in parallel
	"postCreateCommand": {
		// In GitHub Codespaces we'll only have a single "Initial commit".
		// But direct launch of Dev Container will keep the full history.
		// And launching Dev Container within VS Code will also keep the working files, especially Jutjutsu.
		// So we:
		// 1. add a distinct remote called 'instruction'
		// 2. setup jj if it hasn't been already
		"git": "git remote add instruction https://gitlab.com/dkml/education/ui-series/2025a/1-tutorial-for-codespaces.git && { [ -e .jj ] || jj git init --colocate; }",
		//
		// --------------------------- dotnet restore ---------------------------
		//
		// The iOS workload (ex. Microsoft.iOS.Sdk.net8.0_18.0) will not be available
		// on Linux:
		// $ sudo dotnet workload install ios
		// > Workload installation failed: Workload ID ios isn't supported on this platform.
		//
		// and the C# vscode extension will say
		// "Failed to restore NuGet packages for the solution." because of that.
		//
		// So we skip ScoutTrainingApp.iOS and _manually_ restore only the projects we need.
		// That also includes setting 'dotnet.projects.enableAutomaticRestore' to false
		// in settings.json so the C# extension does not try to restore itself.
		//
		// BUT: Since we are using local Avalonia builds we can't do `dotnet restore`.
		// So `dotnet build` instead.
		"dotnet": "dotnet dev-certs https && dotnet build ScoutTrainingApp.Desktop && dotnet build ScoutTrainingApp.Browser"
	},
	// Configure tool-specific properties.
	"customizations": {
		"vscode": {
			"extensions": [
				"ms-dotnettools.csdevkit",
				"avaloniateam.vscode-avalonia",
				"dabbinavo.xamlstyler",
				"shd101wyy.markdown-preview-enhanced"
			],
			"settings": {
				"files.exclude": {
					"**/.jj": true,
					"**/_build": true,
					"**/.merlin": true,
					"**/.z-dk-dune-project": true,
					"**/#s": true,
					"**/dune-workspace": true
				},
				// GitHub Dark and GitHub Dark High Contrast are available in GitHub Codespaces,
				// but might not be in your workspace.
				"workbench.colorTheme": "GitHub Dark High Contrast",
				"window.autoDetectColorScheme": false				
			}
		},
		"codespaces": {
			"openFiles": [
				"content/TUTORIAL.md"
			]
		}
	},
	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
	"containerEnv": {
		// Don't send telemetry from 'dotnet ...'
		"DOTNET_CLI_TELEMETRY_OPTOUT": "1"
	}
}